<?xml version="1.0"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<project default="antunit" xmlns:au="antlib:org.apache.ant.antunit">
  <import file="../../antunit-base.xml" />

  <target name="-create-javah-adapter">
    <mkdir dir="${input}/org/example" />
    <echo file="${input}/org/example/Adapter.java">
      <![CDATA[
package org.example;
import org.apache.tools.ant.taskdefs.optional.javah.JavahAdapter;
import org.apache.tools.ant.taskdefs.optional.Javah;

public class Adapter implements JavahAdapter {
    public boolean compile(Javah javah) {
        System.err.println("adapter called");
        return true;
    }
}]]>
    </echo>
    <mkdir dir="${resources}" />
    <javac srcdir="${input}" destdir="${resources}" />
  </target>

  <target name="testAdapterNotFound" depends="-create-javah-adapter">
    <au:expectfailure>
      <javah class="org.example.Adapter" destdir="${output}" implementation="org.example.Adapter" />
    </au:expectfailure>
    <au:assertLogDoesntContain text="adapter called" />
  </target>

  <target name="testImplementationClasspath" depends="-create-javah-adapter" description="https://issues.apache.org/bugzilla/show_bug.cgi?id=11143">
    <mkdir dir="${output}" />
    <javah class="org.example.Adapter" destdir="${output}" implementation="org.example.Adapter">
      <implementationclasspath location="${resources}" />
    </javah>
    <au:assertLogContains text="adapter called" />
  </target>

  <target name="testImplementationAsNestedElement" depends="-create-javah-adapter">
    <componentdef classname="org.example.Adapter" name="myjavac">
      <classpath location="${resources}" />
    </componentdef>
    <mkdir dir="${output}" />
    <javah class="org.example.Adapter" destdir="${output}">
      <myjavac />
    </javah>
    <au:assertLogContains text="adapter called" />
  </target>

  <target name="-setupForRealJavahTests">
    <condition property="sunjavah.present">
      <or>
        <available classname="com.sun.tools.javah.oldjavah.Main"/>
        <available classname="com.sun.tools.javah.Main"/>
      </or>
    </condition>
    <mkdir dir="${input}/org/example"/>
    <mkdir dir="${output}/org/example"/>
    <echo file="${input}/org/example/Foo.java">
      <![CDATA[
package org.example;
public class Foo {
    public Foo() {}
    public native String bar(Object baz);
}
]]></echo>
    <javac srcdir="${input}" destdir="${output}"/>
    <presetdef name="javah-single">
      <javah destdir="${output}">
        <class name="org.example.Foo"/>
        <classpath>
          <pathelement location="${output}"/>
        </classpath>
      </javah>
    </presetdef>
    <presetdef name="javah-fileset">
      <javah destdir="${output}">
        <fileset dir="${output}">
  	  <include name="**/*.class"/>
        </fileset>
        <classpath>
  	  <pathelement location="${output}"/>
        </classpath>
      </javah>
    </presetdef>
  </target>

  <target name="testSimpleCompile" depends="-setupForRealJavahTests">
    <javah-single/>
    <au:assertFileExists file="${output}/org_example_Foo.h"/>
  </target>

  <target name="testCompileUsingFileset" depends="-setupForRealJavahTests">
    <javah-fileset/>
    <au:assertFileExists file="${output}/org_example_Foo.h"/>
  </target>

  <target name="testSimpleCompileSun" depends="-setupForRealJavahTests"
          if="sunjavah.present">
    <javah-single implementation="sun"/>
    <au:assertFileExists file="${output}/org_example_Foo.h"/>
  </target>

  <target name="testCompileUsingFilesetSun" depends="-setupForRealJavahTests"
          if="sunjavah.present">
    <javah-fileset implementation="sun"/>
    <au:assertFileExists file="${output}/org_example_Foo.h"/>
  </target>

  <target name="testSimpleCompileForking" depends="-setupForRealJavahTests">
    <javah-single implementation="forking"/>
    <au:assertFileExists file="${output}/org_example_Foo.h"/>
  </target>

  <target name="testCompileUsingFilesetForking" depends="-setupForRealJavahTests">
    <javah-fileset implementation="forking"/>
    <au:assertFileExists file="${output}/org_example_Foo.h"/>
  </target>
</project>
